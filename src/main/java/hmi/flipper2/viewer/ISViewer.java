/*******************************************************************************
 * Copyright (C) 2017-2020 Human Media Interaction, University of Twente, the Netherlands
 *
 * This file is part of the Flipper-2.0 Dialogue Control project.
 *
 * Flipper is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License (LGPL) as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Flipper is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Flipper.  If not, see http://www.gnu.org/licenses/.
 ******************************************************************************/
package hmi.flipper2.viewer;

import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.io.StringReader;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonValue;
import javax.json.JsonValue.ValueType;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * Simple ISViewer that shows the information state in a JFrame.
 * Can be set to be used in the flipper.properties file
 * @author Jelte
 */
public class ISViewer extends javax.swing.JFrame {
    
    /**
     * Creates new form ISViewer
     */
    public ISViewer() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                try {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ISViewer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else{
                try {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ISViewer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        //</editor-fold>
        initComponents();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice defaultScreen = ge.getDefaultScreenDevice();
        Rectangle rect = defaultScreen.getDefaultConfiguration().getBounds();
        int x = (int) rect.getMaxX() - this.getWidth();
        int y = 0;
        this.setLocation(x, y);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        informationState = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Information State Viewer");
        setPreferredSize(new java.awt.Dimension(475, 1080));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("is");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("user");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("behaviour");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("agent");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("behaviour");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        informationState.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(informationState);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
       
    /**
     * Method for initializing the GUI Form
     * @param viewer, the current object to display
     */
    public void showViewer(ISViewer viewer){
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {            
            viewer.setVisible(true);
        });
    }

    /**
     * Method for changing the tree
     * @param obj, the JSON object representing the information state
     * @param master, the root of the current tree
     * @return the root of the current tree with the JSON object
     */
    public DefaultMutableTreeNode serializeJsonToTree(JsonValue obj, DefaultMutableTreeNode master) {
        DefaultMutableTreeNode[] nodes = {};
        if(obj instanceof JsonObject){
            JsonObject jo = (JsonObject) obj;
            if(!jo.isEmpty()){
                for(String key: jo.keySet()){
                    DefaultMutableTreeNode node = new DefaultMutableTreeNode(key);
                    if(!jo.get(key).getValueType().equals(ValueType.OBJECT) && !jo.get(key).getValueType().equals(ValueType.ARRAY)){
                        nodes = Arrays.copyOf(nodes, nodes.length + 1);
                        nodes[nodes.length - 1] = new DefaultMutableTreeNode(key + ": " + jo.get(key).toString());
                    }
                    else{
                        if(jo.get(key).getValueType().equals(ValueType.ARRAY) && jo.get(key).asJsonArray().isEmpty()){
                            nodes = Arrays.copyOf(nodes, nodes.length + 1);
                            nodes[nodes.length - 1] = new DefaultMutableTreeNode(key + ": " + jo.get(key).asJsonArray().toString());
                        }
                        else if(jo.get(key).getValueType().equals(ValueType.OBJECT) && jo.get(key).asJsonObject().isEmpty()){
                            nodes = Arrays.copyOf(nodes, nodes.length + 1);
                            nodes[nodes.length - 1] = new DefaultMutableTreeNode(key + ": " + jo.get(key).asJsonObject().toString());
                        }
                        else{
                            this.serializeJsonToTree(jo.get(key), node);
                            master.add(node);
                        }   
                    }                    
                }
            }
        }
        else if(obj instanceof JsonArray){
            JsonArray ja = (JsonArray) obj;
            for(int i = 0; i < ja.size(); i++){
                JsonValue element = ja.get(i);
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(element);
                if(!element.getValueType().equals(ValueType.OBJECT) && !element.getValueType().equals(ValueType.ARRAY)){
                    nodes = Arrays.copyOf(nodes, nodes.length + 1);
                    nodes[nodes.length - 1] = new DefaultMutableTreeNode(element.toString());
                }
                else{
                    if(element.getValueType().equals(ValueType.ARRAY) && element.asJsonArray().isEmpty()){
                        nodes = Arrays.copyOf(nodes, nodes.length + 1);
                        nodes[nodes.length - 1] = new DefaultMutableTreeNode(element.asJsonArray().toString() + ": []");
                    }
                    else if(element.getValueType().equals(ValueType.OBJECT) && element.asJsonObject().isEmpty()){
                        nodes = Arrays.copyOf(nodes, nodes.length + 1);
                        nodes[nodes.length - 1] = new DefaultMutableTreeNode(element.asJsonObject().toString() + ": {}");
                    }
                    else{
                        this.serializeJsonToTree(element, node);
                        master.add(node);
                    }                    
                }                           
            }            
        }        
        for (DefaultMutableTreeNode node : nodes) {
            master.add(node);            
        }
        return master;     
    }
    
    /**
     * Method that updates the ISViewer with the given JSON string
     * @param toJson, a JSON string to be displayed in the ISViewer
     */
    public void updateTree(String toJson){
        JsonObject json;
        try (JsonReader jsonReader = Json.createReader(new StringReader(toJson))) {
            json = jsonReader.readObject();
        }
        updateTree(json);        
    }
    
    /**
     * Method that updates the ISViewer with the given JSON string
     * @param json, a json string to be displayed in the ISViewer
     */
    public void updateTree(JsonObject json){        
        DefaultTreeModel model = (DefaultTreeModel) informationState.getModel();        
        DefaultMutableTreeNode top = new DefaultMutableTreeNode("is");                
        model.setRoot(top);
        this.serializeJsonToTree(json, top);
        model.reload();      
        for(int i=0;i<this.informationState.getRowCount();i++){
            this.informationState.expandRow(i);
        }
    }        
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree informationState;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
